import { Component, Input } from '@angular/core';
import { NestedObservation, Score } from 'your-models-path'; // Import your models/interfaces

@Component({
  selector: 'app-observation-tree-node',
  templateUrl: './observation-tree-node.component.html',
  styleUrls: ['./observation-tree-node.component.css'] // Update with your styles
})
export class ObservationTreeNodeComponent {
  @Input() observations: NestedObservation[];
  @Input() collapsedObservations: string[];
  @Input() scores: Score[];
  @Input() indentationLevel: number;
  @Input() currentObservationId: string | undefined;
  @Input() showMetrics?: boolean;
  @Input() showScores?: boolean;

  constructor() { }

  setCurrentObservationId(id: string | undefined) {
    // Implement setCurrentObservationId logic
  }

  toggleCollapsedObservation(id: string) {
    // Implement toggleCollapsedObservation logic
  }
}



<div *ngFor="let observation of observations | sort:sortByStartTime">
  <div class="flex">
    <div *ngFor="let _ of range(indentationLevel)" class="mx-2 border-r"></div>
    <div class="group my-0.5 flex flex-1 cursor-pointer flex-col gap-1 rounded-sm p-1"
         [ngClass]="{
          'bg-muted': currentObservationId === observation.id,
          'hover:bg-primary-foreground': currentObservationId !== observation.id
         }"
         (click)="setCurrentObservationId(observation.id)">
      <!-- Rest of your Angular template -->
    </div>
  </div>
  <app-observation-tree-node *ngIf="!collapsed"
                             [observations]="observation.children"
                             [collapsedObservations]="collapsedObservations"
                             [toggleCollapsedObservation]="toggleCollapsedObservation"
                             [scores]="scores"
                             [indentationLevel]="indentationLevel + 1"
                             [currentObservationId]="currentObservationId"
                             [showMetrics]="showMetrics"
                             [showScores]="showScores">
  </app-observation-tree-node>
</div>













import { Component, Input } from '@angular/core';
import { NestedObservation, Score } from 'your-models-path'; // Adjust the import path

@Component({
  selector: 'app-observation-tree-node',
  templateUrl: './observation-tree-node.component.html',
  styleUrls: ['./observation-tree-node.component.css'] // Adjust the style file path
})
export class ObservationTreeNodeComponent {
  @Input() observations: NestedObservation[];
  @Input() collapsedObservations: string[];
  @Input() scores: Score[];
  @Input() indentationLevel: number;
  @Input() currentObservationId: string | undefined;
  @Input() showMetrics?: boolean;
  @Input() showScores?: boolean;

  constructor() { }

  setCurrentObservationId(id: string | undefined) {
    // Implement setCurrentObservationId logic
  }

  toggleCollapsedObservation(id: string) {
    // Implement toggleCollapsedObservation logic
  }

  // Helper method to generate an array of the desired length
  range(length: number): number[] {
    return Array.from({ length }, (_, i) => i);
  }
}



<div *ngFor="let observation of observations | sort:sortByStartTime">
  <div class="flex">
    <div *ngFor="let _ of range(indentationLevel)" class="mx-2 border-r"></div>
    <div class="group my-0.5 flex flex-1 cursor-pointer flex-col gap-1 rounded-sm p-1"
         [ngClass]="{
           'bg-muted': currentObservationId === observation.id,
           'hover:bg-primary-foreground': currentObservationId !== observation.id
         }"
         (click)="setCurrentObservationId(observation.id)">
      <!-- Rest of your Angular template content -->
    </div>
  </div>
  <app-observation-tree-node *ngIf="!collapsed"
                             [observations]="observation.children"
                             [collapsedObservations]="collapsedObservations"
                             [toggleCollapsedObservation]="toggleCollapsedObservation"
                             [scores]="scores"
                             [indentationLevel]="indentationLevel + 1"
                             [currentObservationId]="currentObservationId"
                             [showMetrics]="showMetrics"
                             [showScores]="showScores">
  </app-observation-tree-node>
</div>


https://github.com/langfuse/langfuse/blob/main/web/src/components/trace/ObservationTree.tsx












ng generate component ScoresGroup


import { Component, Input, OnInit } from '@angular/core';

@Component({
  selector: 'app-scores-group',
  templateUrl: './scores-group.component.html',
  styleUrls: ['./scores-group.component.css']
})
export class ScoresGroupComponent implements OnInit {
  @Input() groupedScores: { [key: string]: number[] } = {};

  sortedScores: [string, number[]][] = [];

  ngOnInit(): void {
    this.sortedScores = Object.entries(this.groupedScores).sort(([a], [b]) => a < b ? -1 : 1);
  }
}




<div *ngFor="let group of sortedScores">
  <div class="badge outline break-all font-normal">
    {{ group[0] }}: <app-scores-of-group [scores]="group[1]" class="ml-2"></app-scores-of-group>
  </div>
</div>



ng generate component ScoresOfGroup



import { Component, Input } from '@angular/core';

@Component({
  selector: 'app-scores-of-group',
  templateUrl: './scores-of-group.component.html',
  styleUrls: ['./scores-of-group.component.css']
})
export class ScoresOfGroupComponent {
  @Input() scores: number[] = [];
}


<span *ngFor="let score of scores">
  {{ score }} <span *ngIf="!isLastScore(score)">,</span>
</span>



import { Component, Input } from '@angular/core';

@Component({
  selector: 'app-scores-of-group',
  templateUrl: './scores-of-group.component.html',
  styleUrls: ['./scores-of-group.component.css']
})
export class ScoresOfGroupComponent {
  @Input() scores: number[] = [];

  isLastScore(score: number): boolean {
    return this.scores.indexOf(score) === this.scores.length - 1;
  }
}

